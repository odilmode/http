basePath: /
definitions:
  main.Chirp:
    description: A chirp created by a user
    properties:
      body:
        type: string
      created_at:
        type: string
      id:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  main.ErrorResponse:
    properties:
      error:
        description: Error message describing what went wrong
        type: string
    type: object
  main.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  main.RequestBody:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  main.ResponseBody:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      is_chirpy_red:
        type: boolean
      updated_at:
        type: string
    type: object
  main.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      is_chirpy_red:
        type: boolean
      updated_at:
        type: string
    type: object
  main.createUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  main.requestBody:
    properties:
      body:
        description: |-
          Body is the text content of the chirp
          max length: 140 characters
        type: string
    type: object
  main.response:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      is_chirpy_red:
        type: boolean
      refresh_token:
        type: string
      token:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    name: Mirodilbek Fazilov
    url: https://github.com/odilmode
  description: Production-style REST API server built with Go.
  license:
    name: MIT
  termsOfService: https://github.com/yourusername/chirpy
  title: Chirpy API
  version: "1.0"
paths:
  /admin/metrics:
    get:
      description: Returns an HTML page showing how many times Chirpy has been visited
      produces:
      - text/html
      responses:
        "200":
          description: HTML content with visit count
          schema:
            type: string
      summary: Show Chirpy usage metrics
      tags:
      - admin
  /admin/reset:
    post:
      description: Deletes all users from the database and resets hit counter. Only
        accessible in development environment.
      produces:
      - text/plain
      responses:
        "200":
          description: All users deleted and hits reset to 0
          schema:
            type: string
        "403":
          description: 'Forbidden: This endpoint is only accessible in development
            environment'
          schema:
            type: string
        "500":
          description: Failed to delete all users
          schema:
            type: string
      summary: Reset users and file server hits
      tags:
      - admin
  /api/chirps:
    get:
      consumes:
      - application/json
      description: Retrieve chirps, optionally filtered by author_id and sorted by
        creation time
      parameters:
      - description: Filter chirps by author UUID
        in: query
        name: author_id
        type: string
      - description: 'Sort order: asc (default) or desc'
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.Chirp'
            type: array
        "400":
          description: Invalid author_id
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Failed to fetch chirps or encode response
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Get Chirps
      tags:
      - chirps
    post:
      consumes:
      - application/json
      description: Authenticated endpoint to create a chirp with max length 140 characters.
        Filters bad words.
      parameters:
      - description: Chirp body
        in: body
        name: chirp
        required: true
        schema:
          $ref: '#/definitions/main.requestBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/main.Chirp'
        "400":
          description: Invalid author_id
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "401":
          description: Unauthorized - missing or invalid JWT
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error - failed to create chirp
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new chirp
      tags:
      - chirps
  /api/chirps/{chirpID}:
    delete:
      consumes:
      - application/json
      description: Delete a chirp if the authenticated user is the author
      parameters:
      - description: Chirp ID
        in: path
        name: chirpID
        required: true
        type: string
      - description: Bearer JWT token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid chirp ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized or missing token
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: 'Forbidden: not the author'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Chirp not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a chirp
      tags:
      - Chirps
    get:
      consumes:
      - application/json
      description: Retrieve a chirp by its ID
      parameters:
      - description: Chirp ID
        in: path
        name: chirpID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.Chirp'
        "400":
          description: Invalid chirp ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Chirp not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a chirp
      tags:
      - Chirps
  /api/healthz:
    get:
      description: Returns "OK" if the server is ready to handle requests
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Readiness check endpoint
      tags:
      - health
  /api/login:
    post:
      consumes:
      - application/json
      description: Authenticates user and returns JWT access and refresh tokens
      parameters:
      - description: User email and password
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/main.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.response'
        "401":
          description: Incorrect email or password
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: User Login
      tags:
      - auth
  /api/polka/webhooks:
    post:
      consumes:
      - application/json
      description: Handles webhook events from Polka, such as user upgrade notifications
      parameters:
      - description: API Key for authentication
        in: header
        name: X-API-Key
        required: true
        type: string
      - description: Webhook event payload
        in: body
        name: body
        required: true
        schema:
          properties:
            data:
              properties:
                user_id:
                  type: string
              type: object
            event:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid request or user ID
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "401":
          description: 'Unauthorized: invalid or missing API key'
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Handle Polka Webhooks
      tags:
      - webhooks
  /api/refresh:
    post:
      consumes:
      - application/json
      description: Generates a new access JWT given a valid refresh token
      parameters:
      - description: Bearer refresh token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: New access token
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Missing, invalid or expired refresh token
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Failed to create access token
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Refresh Access Token
      tags:
      - auth
  /api/revoke:
    post:
      consumes:
      - application/json
      description: Revokes a given refresh token, effectively logging out the user
      parameters:
      - description: Bearer refresh token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Missing or invalid authorization header
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Failed to revoke token
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Revoke Refresh Token
      tags:
      - auth
  /api/users:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/main.createUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/main.User'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new user
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Updates authenticated user's email and password
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Updated user email and password
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/main.RequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.ResponseBody'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "401":
          description: Unauthorized or invalid token
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Update User Info
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
